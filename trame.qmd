---
title: "Un tableau de bord du trafic aérien avec {{< fa brands r-project >}} ou {{< fa brands python >}}"
number-sections: true
eval: false
---

![](img/cockpit.png){width="30%" fig-align="center"}

L'objectif de ce tutoriel est d'amener, pas à pas, à la conception
voire à la mise à disposition d'un tableau de bord
du trafic aérien avec {{< fa brands r-project >}}.
Une démonstration de cette application est disponible à l'adresse <>

L'application interactive proposée présentera un nombre de fonctionnalité
limitées afin de se concentrer sur la démarche. L'objectif est de construire
progressivement celle-ci en suivant les étapes logiques du déroulement d'un
projet interactif: découverte et exploration des données, création de statistiques
descriptives et de visualisations simples, création d'une application pour
gagner en liberté. Ce tutoriel est également l'occasion de découvrir quelques
bonnes pratiques de programmation avec `R` afin de rendre les projets plus
fiables, évolutifs et lisibles. 

::: callout-note
Si vous désirez aller plus loin sur certaines dimensions de ce projet,
vous pouvez tout à fait essayer de vous-mêmes d'introduire de nouveaux
ingrédients dans l'application que vous développez.
:::




# Exploration des données de trafic aérien


## Préliminaire: récupérer le projet squelette avec `Git` 

Si vous avez utilisé le lien de lancement rapide mis à disposition
sur la page [inseefrlab.github.io/funathon2024/](https://inseefrlab.github.io/funathon2024/),
vous pouvez sauter cette étape de récupération du modèle de projet avec `Git`.

::: callout-note
## Récupérer le projet

:::: {.panel-tabset}
## Interface graphique

La fiche `utilitR` sur l'[utilisation de `Git`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_git_utilisation.html#recuperer-url
) explicite la démarche générale pour
récupérer du code. 

En premier lieu, créer un nouveau projet et sélectionner `Version Control`. 

![](https://book.utilitr.org/pics_resized/git/create_project_1.png)

Choisir `Git` et dans l'interface suivante:

![](https://book.utilitr.org/pics_resized/git/create_project_2.png)

Passer la valeur

```r
https://github.com/inseefrlab/funathon2024_sujet2.git
```

et créer le projet. 


## Depuis le terminal
```bash
git clone https://github.com/inseefrlab/funathon2024_sujet2.git
```
::::

:::

Le projet comporte de nombreux fichiers. Nous allons 
progressivement les découvrir dans ce tutoriel. A l'heure actuelle,
on peut se concentrer sur les fichiers suivants

```
|- renv.lock
|- server.R
|- ui.R
```

Le premier fichier correspond à la liste des _packages_ nécessaires
pour reproduire l'environnement. Il a été généré automatiquement grâce à 
un écosystème `renv` particulièrement adapté pour assurer la reproductibilité
de projets `R`. 


## Installer les _packages_ nécessaires pour ce tutoriel

Pour progresser dans ce tutoriel, un certain nombre de _packages_
seront nécessaires à installer. La bonne pratique pour la gestion de 
l'environnement est la suivante:

- En `R`, utiliser `renv` qui se charge de reconstruire un environnement cohérent avec celui qui a été défini par un autre utilisateur grâce au fichier `renv.lock` (construit lui-même automatiquement grâce à `renv`). 
- En `Python`, utiliser les environnements virtuels. Le plus simple est de lister
les dépendances `requirements.txt` pour

```r
renv::restore()
```



## Récupérer les données

## Appli1-a :



Importer une des bases dont l'url est présent dans sources.yml
- Importer une base airports
- Importer une base liaisons
- Importer une base compagnie
Visuliser ces données sous RStudio.


## Appli1-b : 
Importer ces trois bases en concaténant tous les millésimes.
Suggestion : utiliser `readr`. Ce package permet d'importer plusieurs tables en une seule étape (il faut renseigner un vecteur d'urls dans le paramètre file).
Suggestion : créer une colonne pour l'année (`an`) et une colonne pour le mois (`mois`).
Passer tous les noms de colonnes en minuscule.

## Découvrir la base des aéroports
- Structure de la table
- Unité statistique
- Relation entre les colonnes

## Appli2:
faire une figure du trafic par aéroport

1. Choisir un aéroport et préparer les données

```{r}
liste_aeroports = unique(pax_apt$apt)
default_airport <- liste_aeroports[1]
```

```{r}
trafic_aeroports <- pax_apt_all %>%
  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr) %>%
  filter(apt %in% default_airport)
```

```{r}
trafic_aeroports <- trafic_aeroports %>%
  mutate(
    date = as.Date(paste(an, mois, "01", sep="-"))
  )
```

2. Faire un ggplot pour regarder à quoi ça ressemble

```{r}
ggplot(trafic_aeroports) + geom_line(aes(x = date, y = trafic))
```

3. Transformer en plotly

```{r}
trafic_aeroports %>%
plot_ly(
  x = ~date, y = ~trafic,
  text = ~apt_nom,
  hovertemplate = paste("<i>Aéroport:</i> %{text}<br>Trafic: %{y}") ,
  type = 'scatter', mode = 'lines+markers')
```

4. Faire une fonction

Faire un tableauDT

Préparer le code pour DT

Appli4

Faire un leaflet

```{r}

# geojson_airports <- "https://data.opendatasoft.com/api/explore/v2.1/catalog/datasets/osm-world-airports@babel/exports/geojson?lang=fr&timezone=Europe%2FBerlin"
```

```{r}
# airports_location <- sf::st_read(geojson_airports)
```

```{r}
aeroports <- readr::read_csv2("apt_localisation.csv")

library(sf)
aeroports <- st_as_sf(aeroports, coords = c("Longitude", "Latitude"), crs = 4326)

trafic_aeroports <- aeroports %>%
  inner_join(pax_apt, by = c("Code OACI" = "apt")) %>%
  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr)
```

```{r}
palette <- c("darkred", "forestgreen", "dodgerblue", "gold")
```

```{r}
trafic_aeroports <- trafic_aeroports %>%
  mutate(
    volume = ntile(trafic, 4)
) %>%
  mutate(
    color = palette[volume]
  )
  
icons <- awesomeIcons(
  icon = 'ios-close',
  iconColor = 'black',
  library = 'ion',
  markerColor = trafic_aeroports$color
)

leaflet(trafic_aeroports) %>% addTiles() %>%
  addMarkers(popup = ~paste0(Nom, ": ", trafic))
  #addAwesomeMarkers(icon=icons, label=~as.character(trafic))
```


Appli5
Préparer un premier shiny sans plotly & leaflet

Appli6
Ajouter à l'UI le plotly & leaflet

Appli7
Contrôle de l'environnement avec renv