---
title: "Un tableau de bord du trafic aérien avec {{< fa brands r-project >}} ou {{< fa brands python >}}"
number-sections: true
eval: false
---

```{=html}
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?version=1.15.25&autoLaunch=true&networking.user.enabled=true&git.repository=«https%3A%2F%2Fgithub.com%2FInseeFrLab%2Ffunathon2024_sujet2.git»&onyxia.friendlyName=«config-funathon2024»&kubernetes.role=«admin»" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/SSP%20Cloud-Ouvrir_dans_RStudio-blue?logo=rstudio&amp;logoColor=blue" alt="Onyxia"></a>
```


![](img/cockpit.png){width="25%" fig-align="center"}

# Introduction {.unnumbered}

L'objectif de ce tutoriel est d'amener, pas à pas, à la conception
voire à la mise à disposition d'un tableau de bord
du trafic aérien avec {{< fa brands r-project >}}.
Une démonstration de cette application est disponible à l'adresse <>.


L'application interactive proposée présentera un nombre de fonctionnalités
limitées afin de se concentrer sur la démarche. L'objectif est de construire
progressivement celle-ci en suivant les étapes logiques du déroulement d'un
projet de développement d'application interactive: découverte et exploration des données, création de statistiques
descriptives et de visualisations simples sur un jeu de données, 
extension du nombre de visualisations accessibles par la création d'une application. Ce tutoriel est également l'occasion de découvrir quelques
bonnes pratiques de programmation avec `R` afin de rendre les projets plus
fiables, évolutifs et lisibles. 

Les exercices de conception pas à pas de l'application s'adressent aussi bien à des
débutants qu'à des utilisateurs plus experts. La mise à disposition, c'est-à-dire
la mise en production de cette application, fait appel à des concepts
et outils plus
avancés et est donc moins accessible à des débutants.

::: callout-tip
Si vous désirez aller plus loin sur certaines dimensions de ce projet,
vous pouvez tout à fait essayer de vous-mêmes d'introduire de nouveaux
ingrédients dans l'application que vous développez.
:::




# Exploration des données de trafic aérien


## Préliminaire: récupérer le projet squelette avec `Git` {{< fa brands git-alt >}}

Si vous disposez d'un compte sur le [sspcloud](https://www.sspcloud.fr/),
la méthode recommandée pour se lancer dans ce tutoriel est de cliquer
sur le bouton suivant

```{=html}
<center>
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?version=1.15.25&autoLaunch=true&networking.user.enabled=true&git.repository=«https%3A%2F%2Fgithub.com%2FInseeFrLab%2Ffunathon2024_sujet2.git»&onyxia.friendlyName=«config-funathon2024»&kubernetes.role=«admin»" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/SSP%20Cloud-Ouvrir_dans_RStudio-blue?logo=rstudio&amp;logoColor=blue" alt="Onyxia"></a>
</center>
<br>
```



Si vous avez utilisé le lien de lancement rapide mis à disposition
sur la page [inseefrlab.github.io/funathon2024/](https://inseefrlab.github.io/funathon2024/)
ou ci-dessus, 
vous pouvez sauter l'étape de récupération du modèle de projet avec `Git`, cela
a été fait automatiquement lors de la création de votre environnement `RStudio`. 

::: {.callout-note collapse="true"}
## Récupérer le projet si vous n'avez pas utilisé le bouton proposé

:::: {.panel-tabset}
## Interface graphique

La fiche `utilitR` sur l'[utilisation de `Git`](https://book.utilitr.org/03_Fiches_thematiques/Fiche_git_utilisation.html#recuperer-url
) explicite la démarche générale pour
récupérer du code grâce à `Git`. Il est recommandé de lire celle-ci si vous
n'êtes pas familier de `Git`. 

Les étapes suivantes permettront de récupérer le projet:

1️⃣ En premier lieu, dans `RStudio`, créer un nouveau projet et sélectionner `Version Control`. 

![](https://book.utilitr.org/pics_resized/git/create_project_1.png)

2️⃣ Choisir `Git`, ce qui devrait ouvrir une fenêtre similaire à celle ci-dessous:

![](https://book.utilitr.org/pics_resized/git/create_project_2.png)

3️⃣ Dans la fenêtre `Repository URL`, passer la valeur

```r
https://github.com/inseefrlab/funathon2024_sujet2.git
```

laisser les valeurs par défaut qui viennent ensuite et créer le projet. 


## Depuis le terminal

Après avoir ouvert un terminal dans `RStudio`, faire 

```bash
git clone https://github.com/inseefrlab/funathon2024_sujet2.git
```

puis, dans l'explorateur de fichiers (fenêtre en bas à droite), cliquer
sur le fichier `RTraffic.Rproj` pour ouvrir le projet. 
::::

:::

Le projet récupéré comporte de nombreux fichiers. Nous allons 
progressivement les découvrir dans ce tutoriel. A l'heure actuelle,
on peut se concentrer sur les fichiers suivants:

```
|- renv.lock
|- global.R
|- server.R
|- ui.R
```

Le premier fichier correspond à la liste des _packages_ nécessaires
pour reproduire l'environnement. Il a été généré automatiquement grâce à 
un écosystème `renv` particulièrement adapté pour assurer la reproductibilité
de projets `R` (voir la suite). 

Les fichiers `server.R` et `ui.R` constituent le coeur de notre application 
`Shiny`. Ils représentent, respectivement, le moteur de calcul (le serveur)
et l'interface utilisateur de notre application. Le fichier `global.R` stocke
un certain nombre d'objets utiles à l'application mais qui n'ont pas besoin
d'être recalculé à chaque action sur l'interface graphique. 


## Installer les _packages_ nécessaires pour ce tutoriel

### Principe

Pour progresser dans ce tutoriel, un certain nombre de _packages_
doivent être installés. Sans eux, même avec le code de l'application, vous
ne serez pas en mesure de reproduire celle-ci. 

Les bonnes pratiques pour la gestion de 
l'environnement sont assez proches en {{< fa brands r-project >}} et {{< fa brands python >}}.
Le principal général est qu'il existe des outils qui permettent à un utilisateur de lister l'ensemble des packages dans son environnement avec leur version. Grâce à cette liste, d'autres personnes pourront reproduire l'application si elles disposent des mêmes _inputs_ (le code, les données...). 

En effet, il est important de voir l'application comme le résultat de la combinaison de plusieurs ingrédients. Dans notre cas, nous en avons trois:

* Du code `R` ou `Python` : celui-ci a été récupéré par le biais de `Git`
* Des éléments de configuration:
    + le fichier `renv.lock` (`R`) ou `requirements.txt` (`Python`) qui permettra de reconstruire notre environnement à l'identique grâce à des outils adaptés[^generation]
    + le fichier `sources.yaml` qui liste l'emplacement des sources sur le site [data.gouv](https://www.data.gouv.fr/fr/)
* Des données: nous évoquerons celles-ci lors de la prochaine partie

__Figure drawio à venir__

De manière générale, c'est une bonne pratique de structurer son projet comme une
combinaison de ces facteurs. Cela vous amènera à faire des projets plus reproductible
mais aussi à la structure plus lisible. 

Pour les utilisateurs de `R`, la [formation de l'Insee aux bonnes pratiques](https://inseefrlab.github.io/formation-bonnes-pratiques-git-R/)
consacre une partie aux environnements reproductibles avec `renv`. Pour les utilisateurs
de `Python`, le [cours de mise en production de projets _data science_](https://ensae-reproductibilite.github.io/website/chapters/portability.html)
consacre un chapitre au sujet. 

[^generation]: Ces fichiers ne sont pas générés manuellement. Ce sont des outils adaptés (`renv` pour `R`, `pip` pour `Python`) qui font ce travail de versionnage de l'environnement. 

### Créer l'environnement

L'intérêt d'utiliser `renv` est que recréer l'environnement nécessaire
au bon fonctionnement de l'application est très simple avec la commande:

```r
renv::restore()
```

Il est tout à fait possible, ensuite, d'installer des _packages_ supplémentaires
par le biais de `install.packages`. L'environnement proposé par notre fichier
`renv.lock` est le minimum
requis pour reproduire l'application mais ce n'est pas un environnement figé.
Si vous ajoutez des _packages_ utiles pour votre application, avant la phase de mise en production, n'oubliez pas
de faire `renv::snapshot()` pour mettre à jour le fichier `renv.lock`. 

Maintenant que nous disposons d'un environnement fonctionnel, 
nous pouvons avancer sur la conception du projet.

# Récupérer les données

Les sources sont listées

## Appli1-a :



Importer une des bases dont l'url est présent dans sources.yml
- Importer une base airports
- Importer une base liaisons
- Importer une base compagnie
Visuliser ces données sous RStudio.


## Appli1-b : 
Importer ces trois bases en concaténant tous les millésimes.
Suggestion : utiliser `readr`. Ce package permet d'importer plusieurs tables en une seule étape (il faut renseigner un vecteur d'urls dans le paramètre file).
Suggestion : créer une colonne pour l'année (`an`) et une colonne pour le mois (`mois`).
Passer tous les noms de colonnes en minuscule.

## Découvrir la base des aéroports
- Structure de la table
- Unité statistique
- Relation entre les colonnes

## Appli2:
faire une figure du trafic par aéroport

1. Choisir un aéroport et préparer les données

```{r}
liste_aeroports = unique(pax_apt$apt)
default_airport <- liste_aeroports[1]
```

```{r}
trafic_aeroports <- pax_apt_all %>%
  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr) %>%
  filter(apt %in% default_airport)
```

```{r}
trafic_aeroports <- trafic_aeroports %>%
  mutate(
    date = as.Date(paste(an, mois, "01", sep="-"))
  )
```

2. Faire un ggplot pour regarder à quoi ça ressemble

```{r}
ggplot(trafic_aeroports) + geom_line(aes(x = date, y = trafic))
```

3. Transformer en plotly

```{r}
trafic_aeroports %>%
plot_ly(
  x = ~date, y = ~trafic,
  text = ~apt_nom,
  hovertemplate = paste("<i>Aéroport:</i> %{text}<br>Trafic: %{y}") ,
  type = 'scatter', mode = 'lines+markers')
```

4. Faire une fonction

Faire un tableauDT

Préparer le code pour DT

Appli4

Faire un leaflet

```{r}

# geojson_airports <- "https://data.opendatasoft.com/api/explore/v2.1/catalog/datasets/osm-world-airports@babel/exports/geojson?lang=fr&timezone=Europe%2FBerlin"
```

```{r}
# airports_location <- sf::st_read(geojson_airports)
```

```{r}
aeroports <- readr::read_csv2("apt_localisation.csv")

library(sf)
aeroports <- st_as_sf(aeroports, coords = c("Longitude", "Latitude"), crs = 4326)

trafic_aeroports <- aeroports %>%
  inner_join(pax_apt, by = c("Code OACI" = "apt")) %>%
  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr)
```

```{r}
palette <- c("darkred", "forestgreen", "dodgerblue", "gold")
```

```{r}
trafic_aeroports <- trafic_aeroports %>%
  mutate(
    volume = ntile(trafic, 4)
) %>%
  mutate(
    color = palette[volume]
  )
  
icons <- awesomeIcons(
  icon = 'ios-close',
  iconColor = 'black',
  library = 'ion',
  markerColor = trafic_aeroports$color
)

leaflet(trafic_aeroports) %>% addTiles() %>%
  addMarkers(popup = ~paste0(Nom, ": ", trafic))
  #addAwesomeMarkers(icon=icons, label=~as.character(trafic))
```


Appli5
Préparer un premier shiny sans plotly & leaflet

Appli6
Ajouter à l'UI le plotly & leaflet

Appli7
Contrôle de l'environnement avec renv