[
  {
    "objectID": "old/RTraffic.html",
    "href": "old/RTraffic.html",
    "title": "RTraffic",
    "section": "",
    "text": "1 Paramètres\n\nif (!requireNamespace(\"DT\")){install.packages(\"DT\")} #install.packages(\"DT\")#if necessary install package\nt0 = Sys.time()\n\n#stocke les chemins vers les données de trafic dans l'objet \"paths\"\nyear_num = 2018:2022 #to be modified eg c(2019,2022,2023) \nyear_char = as.list(as.character(year_num))\nmonth_char = c(paste0(\"0\", 1:9),10:12)\npaths = data.frame(year_num, c(\"https://www.data.gouv.fr/fr/datasets/r/3b7646ea-276c-4c9b-8151-1e96af2adbf9\", \"https://www.data.gouv.fr/fr/datasets/r/e8efa154-045e-4f8f-a1d7-76a39fa03b7b\", \"https://www.data.gouv.fr/fr/datasets/r/6717f107-be00-4b4b-9706-fa0e5190fb69\", \"https://www.data.gouv.fr/fr/datasets/r/2f9f6e54-e2d7-4e85-b811-2e5e68fa5bca\", \"https://www.data.gouv.fr/fr/datasets/r/f1bd931e-c99e-41ce-865e-9e9785c903ec\"),#url données trafic apt-aéroports sur data.gouv.fr\nc(\"https://www.data.gouv.fr/fr/datasets/r/9c5354ad-31cb-4217-bc88-fb7c9be22655\", \"https://www.data.gouv.fr/fr/datasets/r/0c0a451e-983b-4f06-9627-b5ff1bccd2fc\", \"https://www.data.gouv.fr/fr/datasets/r/dad30bed-7276-4a67-a1ab-a856e6e01788\", \"https://www.data.gouv.fr/fr/datasets/r/bbf6492d-86ac-43a0-9260-7df2ffdb5a77\", \"https://www.data.gouv.fr/fr/datasets/r/af8950bc-e90a-4b7e-bb81-70c79d4c3846\" ),#url données trafic lsn-liaisons sur data.gouv.fr\nc(\"https://www.data.gouv.fr/fr/datasets/r/ddfea6a0-df7e-4402-99fc-165f573f2e10\", \"https://www.data.gouv.fr/fr/datasets/r/8421e029-c8c7-410d-b38c-54455ac3265d\", \"https://www.data.gouv.fr/fr/datasets/r/818eec10-6122-4788-8233-482e779ab837\", \"https://www.data.gouv.fr/fr/datasets/r/0b954774-ccd1-43ec-9b5a-f958fba03e87\", \"https://www.data.gouv.fr/fr/datasets/r/bcec3e1e-940a-4772-bc28-0d7b2b53c718\")#url données trafic cie-compagnies sur data.gouv.fr\n)\nnames(paths) = c(\"year\",\"apt\",\"lsn\",\"cie\")\n\n#charge les fonctions utiles----\nsimplify_text = function(texte){#fonction qui simplifie le texte en retirant la ponctuation et les accents\n  texte=tolower(texte)\n  texte=str_replace_all(texte,\"[:punct:]\",\"\")\n  texte=str_replace_all(texte,\"[:space:]\",\"\")\n  texte=str_replace_all(texte,\"[àâä]\",\"a\")\n  texte=str_replace_all(texte,\"[ç]\",\"c\")\n  texte=str_replace_all(texte,\"[éèêë]\",\"e\")\n  texte=str_replace_all(texte,\"[îï]\",\"i\")\n  texte=str_replace_all(texte,\"[ôö]\",\"o\")\n  texte=str_replace_all(texte,\"[ùûü]\",\"u\")\n  return(texte)}\n    \nload_data = function(data_typ){#fonction qui charge les données dans un dataframe\n  df = NULL\n  for (i in paths[[1]]){\n    print(paste0(data_typ,\" \",i))\n    x = paths %&gt;%\n      select(\"year\", all_of(data_typ)) %&gt;% \n      filter(year == i) #filtre sur l'année sélectionnée\n    df = rbind(df,read.csv(x[[2]], sep = \";\", dec = \",\")) #empile le dataframe sur le précédent\n    }\n  df = df %&gt;% \n    mutate(an = str_sub(ANMOIS,1,4)) %&gt;%\n    mutate(mois = str_sub(ANMOIS,5,6))\n  names(df)=simplify_text(names(df))\n  rm(x,i)\n  return(df)\n  }\n\n#charge les données avec la fonction load_data----\npax_apt = load_data(\"apt\")\npax_cie = load_data(\"cie\")\npax_lsn = load_data(\"lsn\")\ndata_already_loaded = TRUE\nprint(Sys.time()-t0) #mesure le temps machine----\n\n\n\n2 ui\n\nui &lt;- function() {\nfluidPage(\n  verbatimTextOutput(outputId = \"texte\"),\n  checkboxGroupInput(\"mon\", \"Mois : \",\n                     month_char,\n                     inline = T),\n  radioButtons(\"yea\", \"Année : \",\n                     year_char,\n                     inline = T),\n  DT::dataTableOutput(\"table1\"),\n  DT::dataTableOutput(\"table2\")\n)\n}\n\n\n\n3 server\n\nserver &lt;- function(input, output, session) {\n  output$texte &lt;- renderText({\n    paste0(\"Pax in France - DGAC on data.gouv.fr\")\n  })\n  #créé de la réactivité----\n  dfapt = reactive({\n    return(pax_apt %&gt;% filter((mois %in% input$mon)&(an == input$yea)))\n  })\n  dflsn = reactive({\n    return(pax_lsn %&gt;% filter((mois %in% input$mon)&(an == input$yea)))\n  })\n  \n  #créé une table1 de stat par faisceau à partir des données par lsn-liaisons----\n  output$table1 &lt;- DT::renderDataTable(DT::datatable({\n    data = bind_cols(\n      bind_rows(\n        dflsn() %&gt;% summarise(paxloc = round(sum(lsnpaxloc, na.rm = T)/1000000,3)),\n        dflsn() %&gt;%\n          group_by(lsnfsc) %&gt;%\n          summarise(paxloc = round(sum(lsnpaxloc, na.rm = T)/1000000,3)) %&gt;%\n          ungroup\n      )\n    )\n  }, class = \"cell-border compact hover stripe\",\n  options = list(\n    autoWidth = T,\n    columnDefs = list(list(width = '20px', targets = c(0,1,2))),\n    dom = \"Bfrtip\", \n    scrollY = 145, scrollX = 400, scroller = TRUE,\n    fixedColumns = list(leftColumns = 1),\n    select = list(style = 'os', items = 'row'),\n    buttons = c(\n      'copy', 'csv',\n      'colvis',\n      'selectAll', 'selectNone', 'selectRows', 'selectColumns', 'selectCells'\n    )\n  )))\n  \n  #créé une table2 de stat par aéroport à partir des données par apt-aéroports----\n  output$table2 = DT::renderDataTable(DT::datatable({\n    data = bind_rows(\n      dfapt() %&gt;%\n        group_by(apt, aptnom) %&gt;%\n        summarise(paxdep = round(sum(aptpaxdep, na.rm = T)/1000000,3), paxarr = round(sum(aptpaxarr, na.rm = T)/1000000,3), paxtra = round(sum(aptpaxtr, na.rm = T)/1000000,3)) %&gt;%\n        arrange(desc(paxdep)) %&gt;%\n        ungroup\n    )\n  }, class = \"cell-border compact hover stripe\",\n  extensions = c(\"Scroller\", \"FixedColumns\", \"Buttons\", \"Select\"), \n  selection = \"none\",\n  options = list(\n    autoWidth = T,\n    columnDefs = list(list(width = '20px', targets = c(0,1,2))),\n    dom = \"Bfrtip\", \n    scrollY = 145, scrollX = 400, scroller = TRUE,\n    fixedColumns = list(leftColumns = 1),\n    select = list(style = 'os', items = 'row'),\n    buttons = c(\n      'copy', 'csv',\n      'colvis',\n      'selectAll', 'selectNone', 'selectRows', 'selectColumns', 'selectCells'\n    )\n  )))\n  }\n\n\n\n4 shiny\n\nshinyApp(ui, server)#lance le tableau de bord en shiny"
  },
  {
    "objectID": "index.html#préliminaire-récupérer-le-projet-squelette-avec-git-fa-brands-git-alt",
    "href": "index.html#préliminaire-récupérer-le-projet-squelette-avec-git-fa-brands-git-alt",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "1.1 Préliminaire: récupérer le projet squelette avec Git ",
    "text": "1.1 Préliminaire: récupérer le projet squelette avec Git \nSi vous disposez d’un compte sur le sspcloud, la méthode recommandée pour se lancer dans ce tutoriel est de cliquer sur le bouton suivant\n\n\n\n\nSi vous avez utilisé le lien de lancement rapide mis à disposition sur la page inseefrlab.github.io/funathon2024/ ou ci-dessus, vous pouvez sauter l’étape de récupération du modèle de projet avec Git, cela a été fait automatiquement lors de la création de votre environnement RStudio.\n\n\n\n\n\n\nRécupérer le projet si vous n’avez pas utilisé le bouton proposé\n\n\n\n\n\n\nInterface graphiqueDepuis le terminal\n\n\nLa fiche utilitR sur l’utilisation de Git explicite la démarche générale pour récupérer du code grâce à Git. Il est recommandé de lire celle-ci si vous n’êtes pas familier de Git.\nLes étapes suivantes permettront de récupérer le projet:\n1️⃣ En premier lieu, dans RStudio, créer un nouveau projet et sélectionner Version Control.\n\n2️⃣ Choisir Git, ce qui devrait ouvrir une fenêtre similaire à celle ci-dessous:\n\n3️⃣ Dans la fenêtre Repository URL, passer la valeur\nhttps://github.com/inseefrlab/funathon2024_sujet2.git\nlaisser les valeurs par défaut qui viennent ensuite et créer le projet.\n\n\nAprès avoir ouvert un terminal dans RStudio, faire\ngit clone https://github.com/inseefrlab/funathon2024_sujet2.git\npuis, dans l’explorateur de fichiers (fenêtre en bas à droite), cliquer sur le fichier RTraffic.Rproj pour ouvrir le projet.\n\n\n\n\n\n\nLe projet récupéré comporte de nombreux fichiers. Nous allons progressivement les découvrir dans ce tutoriel. A l’heure actuelle, on peut se concentrer sur les fichiers suivants:\n|- renv.lock\n|- global.R\n|- server.R\n|- ui.R\nLe premier fichier correspond à la liste des packages nécessaires pour reproduire l’environnement. Il a été généré automatiquement grâce à un écosystème renv particulièrement adapté pour assurer la reproductibilité de projets R (voir la suite).\nLes fichiers server.R et ui.R constituent le coeur de notre application Shiny. Ils représentent, respectivement, le moteur de calcul (le serveur) et l’interface utilisateur de notre application. Le fichier global.R stocke un certain nombre d’objets utiles à l’application mais qui n’ont pas besoin d’être recalculé à chaque action sur l’interface graphique."
  },
  {
    "objectID": "index.html#installer-les-packages-nécessaires-pour-ce-tutoriel",
    "href": "index.html#installer-les-packages-nécessaires-pour-ce-tutoriel",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "1.2 Installer les packages nécessaires pour ce tutoriel",
    "text": "1.2 Installer les packages nécessaires pour ce tutoriel\n\n1.2.1 Principe\nPour progresser dans ce tutoriel, un certain nombre de packages doivent être installés. Sans eux, même avec le code de l’application, vous ne serez pas en mesure de reproduire celle-ci.\nLes bonnes pratiques pour la gestion de l’environnement sont assez proches en  et . Le principal général est qu’il existe des outils qui permettent à un utilisateur de lister l’ensemble des packages dans son environnement avec leur version. Grâce à cette liste, d’autres personnes pourront reproduire l’application si elles disposent des mêmes inputs (le code, les données…).\nEn effet, il est important de voir l’application comme le résultat de la combinaison de plusieurs ingrédients. Dans notre cas, nous en avons trois:\n\nDu code R ou Python : celui-ci a été récupéré par le biais de Git\nDes éléments de configuration:\n\nle fichier renv.lock (R) ou requirements.txt (Python) qui permettra de reconstruire notre environnement à l’identique grâce à des outils adaptés1\nle fichier sources.yaml qui liste l’emplacement des sources sur le site data.gouv\n\nDes données: nous évoquerons celles-ci lors de la prochaine partie.\n\n\n\n\nIllustration du principe de séparation du code, des données et de la configuration\n\n\nDe manière générale, c’est une bonne pratique de structurer son projet comme une combinaison de ces facteurs. Cela vous amènera à faire des projets plus reproductible mais aussi à la structure plus lisible.\nPour les utilisateurs de R, la formation de l’Insee aux bonnes pratiques consacre une partie aux environnements reproductibles avec renv. Pour les utilisateurs de Python, le cours de mise en production de projets data science consacre un chapitre au sujet.\n\n\n1.2.2 Créer l’environnement\nL’intérêt d’utiliser renv est que recréer l’environnement nécessaire au bon fonctionnement de l’application est très simple avec la commande:\nrenv::restore()\nIl est tout à fait possible, ensuite, d’installer des packages supplémentaires par le biais de install.packages. L’environnement proposé par notre fichier renv.lock est le minimum requis pour reproduire l’application mais ce n’est pas un environnement figé. Si vous ajoutez des packages utiles pour votre application, avant la phase de mise en production, n’oubliez pas de faire renv::snapshot() pour mettre à jour le fichier renv.lock.\nMaintenant que nous disposons d’un environnement fonctionnel, nous pouvons avancer sur la conception du projet. La première étape est d’explorer les jeux de données que nous utiliserons dans l’application"
  },
  {
    "objectID": "index.html#importer-la-liste-des-sources-disponibles",
    "href": "index.html#importer-la-liste-des-sources-disponibles",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "2.1 Importer la liste des sources disponibles",
    "text": "2.1 Importer la liste des sources disponibles\n\n\n\n\n\n\nExercice 1: lire les sources dans \n\n\n\n\nLe package yaml comporte une fonction read_yaml pour transformer un fichier YAML en liste imbriquée. Tester cette fonction sur le fichier sources.yml.\nTransformer ce bout de code en une fonction create_data_list prenant un argument source_file et renvoyant cette liste.\n\n\n\n\n\nVoir la solution\n\n#' Creates a 2-levels list of urls, pointing to open source data\n#' \n#' @param source_file yaml file containing data urls \n#' @return list (level 1 = concepts, level 2 = year).\n#'\n#' @examples\n#'  create_data_list(\"sources.yml\")\n#'  \ncreate_data_list &lt;- function(source_file){\n  catalogue &lt;- yaml::read_yaml(source_file)\n  return(catalogue)\n}\n\nLa solution est dans le fichier R/create_data_list.R. Elle peut être importée dans l’environnement global grâce à la commande:\n\nsource(\"R/create_data_list.R\")"
  },
  {
    "objectID": "index.html#importer-les-premières-bases",
    "href": "index.html#importer-les-premières-bases",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "2.2 Importer les premières bases",
    "text": "2.2 Importer les premières bases\n\nurls &lt;- create_data_list(\"sources.yml\")\n\n\n\n\n\n\n\nExercice 2: découvrir les différentes sources\n\n\n\nCet exercice est, en apparence, un peu long. Néanmoins la première partie de celui-ci permet la construction d’une fonction générique d’import des données qui permet ensuite de gagner du temps et d’éviter la redondance de code.\n\nDonnées aéroports\n\nComme les données sont des CSV européens (séparateur ;), utiliser read_csv2 du package readr pour lire les données à partir de la liste de fichiers unlist(urls$airports)2.\nIl est recommandé de ne pas laisser les types par défaut des colonnes mais de figer ceux-ci avec l’argument suivant:\n\ncol_types = cols(\n  ANMOIS = col_character(),\n  APT = col_character(),\n  APT_NOM = col_character(),\n  APT_ZON = col_character(),\n  .default = col_double()\n)\n\nA partir de la variable ANMOIS, créer les variables an et mois.\n\n\n\nAide si vous êtes bloqué sur cette question\n\nPour extraire des éléments d’une chaine de caractère à partir de la position, il est recommandé d’utiliser la fonction str_sub du package stringr. Pour créer de nouvelles colonnes, il est recommandé d’utiliser la fonction mutate du package dplyr.\nSi vous êtes toujours bloqué, la solution est donnée plus bas 👇\n\n\nCréer une fonction clean_dataframe qui reprend le code de création des variables an et mois, ajoute une étape de passage des noms de colonne en minuscule et renvoie le dataframe en sortie\n\n\n\nSolution\n\nclean_dataframe &lt;- function(df){\n  \n  # Create an et mois columns\n  df &lt;- df %&gt;% \n    mutate(\n      an = str_sub(ANMOIS,1,4),\n      mois = str_sub(ANMOIS,5,6)\n    )\n  \n  # lower case for variable names\n  colnames(df) &lt;- tolower(colnames(df))\n  \n  return(df)\n\n}\n\n\nCréer une fonction import_airport_data qui prend en input list_files et intègre les deux étapes précédentes: la lecture des données, le nettoyage avec clean_dataframe.\n\n\n\nSolution\n\nimport_airport_data &lt;- function(list_files){\n  \n  pax_apt_all &lt;- readr::read_csv2(\n    list_files, \n    col_types = cols(\n      ANMOIS = col_character(),\n      APT = col_character(),\n      APT_NOM = col_character(),\n      APT_ZON = col_character(),\n      .default = col_double()\n    )\n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_apt_all)\n  \n}\n\nReporter cette fonction dans un fichier R/clean_dataframe.R et faire\n\nsource(\"R/clean_dataframe.R\")\n\n\n\nDonnées compagnies\nSur le même principe, créer une fonction import_compagnies_data qui effectue la même suite d’opérations. Faire néanmoins attention aux types des colonnes.\n\n\nRecommandation de paramètre pour read_csv pour l’import de ces fichiers\ncol_types = cols(\n  ANMOIS = col_character(),\n  CIE = col_character(),\n  CIE_NOM = col_character(),\n  CIE_NAT = col_character(),\n  CIE_PAYS = col_character(),\n  .default = col_double()\n)\n\n\n\n\nSolution\n\nimport_compagnies_data &lt;- function(list_files){\n  \n  pax_cie_all &lt;- readr::read_csv2(\n    file = list_files,\n    col_types = cols(\n      ANMOIS = col_character(),\n      CIE = col_character(),\n      CIE_NOM = col_character(),\n      CIE_NAT = col_character(),\n      CIE_PAYS = col_character(),\n      .default = col_double()\n    )\n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_cie_all)\n  \n  \n}\n\n\n\nDonnées liaisons\nSur le même principe, créer une fonction import_liaisons_data qui effectue la même suite d’opérations. Faire néanmoins attention aux types des colonnes.\n\n\nRecommandation de paramètre pour read_csv pour l’import de ces fichiers\ncol_types = cols(\n  ANMOIS = col_character(),\n  LSN = col_character(),\n  LSN_DEP_NOM = col_character(),\n  LSN_ARR_NOM = col_character(),\n  LSN_SCT = col_character(),\n  LSN_FSC = col_character(),\n  .default = col_double()\n)\n\n\n\n\nSolution\n\nimport_liaisons_data &lt;- function(list_files){\n  \n  pax_lsn_all &lt;- readr::read_csv2(\n    file = list_files,\n    col_types = cols(\n      ANMOIS = col_character(),\n      LSN = col_character(),\n      LSN_DEP_NOM = col_character(),\n      LSN_ARR_NOM = col_character(),\n      LSN_SCT = col_character(),\n      LSN_FSC = col_character(),\n      .default = col_double()\n    ) \n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_lsn_all)\n  \n  \n}\n\n\n\nLocalisations des aéroports\nIl s’agit d’un jeu de données spatial. Pour en savoir plus sur ce type de données, il est recommandé de consulter la fiche utilitR sur le sujet ou ce cours introductif\n\nUtiliser la fonction st_read du package sf pour lire ces données (dont la localisation est stockée dans la variable urls$geojson$aiport). Stocker l’objet obtenu sous le nom airports_location\nVérifier que les données sont bien dans le système de représentation WGS 843\n\n\n\nAide\n\nLa fonction à utiliser est sf_crs\n\n\nIl est toujours utile de vérifier que nos données sont bien localisées où on les attend. Pour cela, il est pertinent de faire une carte avec un fond de carte contextuel, même si celle-ci n’est pas très soignée. Pour faire ceci, le plus simple est d’utiliser la fonction addMarkers du package leaflet. Essayez de faire cette carte vous-mêmes ou consultez l’aide ci-dessous\n\n\n\nCode pour faire une carte leaflet minimale\n\nleaflet(airports_location) %&gt;%\n  addTiles() %&gt;%\n  addMarkers(popup = ~Nom)\n\nReporter toutes ces fonctions dans un fichier R/import_data.R.\n\n\n\nA l’issue de cet exercice, vous devriez avoir le fichier R/import_data.R suivant\n\n\nLe fichier R/import_data.R attendu\n\nimport_airport_data &lt;- function(list_files){\n  \n  pax_apt_all &lt;- readr::read_csv2(\n    list_files, \n    col_types = cols(\n      ANMOIS = col_character(),\n      APT = col_character(),\n      APT_NOM = col_character(),\n      APT_ZON = col_character(),\n      .default = col_double()\n    )\n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_apt_all)\n  \n}\n\n\nimport_compagnies_data &lt;- function(list_files){\n  \n  pax_cie_all &lt;- readr::read_csv2(\n    file = list_files,\n    col_types = cols(\n      ANMOIS = col_character(),\n      CIE = col_character(),\n      CIE_NOM = col_character(),\n      CIE_NAT = col_character(),\n      CIE_PAYS = col_character(),\n      .default = col_double()\n    )\n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_cie_all)\n  \n  \n}\n\n\nimport_liaisons_data &lt;- function(list_files){\n  \n  pax_lsn_all &lt;- readr::read_csv2(\n    file = list_files,\n    col_types = cols(\n      ANMOIS = col_character(),\n      LSN = col_character(),\n      LSN_DEP_NOM = col_character(),\n      LSN_ARR_NOM = col_character(),\n      LSN_SCT = col_character(),\n      LSN_FSC = col_character(),\n      .default = col_double()\n    ) \n  ) %&gt;% \n    clean_dataframe()\n  \n  return(pax_lsn_all)\n  \n  \n}\n\nLa carte leaflet que vous devriez avoir obtenue à la fin de l’exercice est la suivante:\n\nleaflet(airports_location) %&gt;%\n  addTiles() %&gt;%\n  addMarkers(popup = ~Nom)\n\n\n\n\n\nA l’issue de l’exercice, le code centralisé dans le script R/import_data.R peut être importé via le code suivant\n\nsource(\"R/import_data.R\")  \n\nVous pouvez initier un script nommé main.R avec les lignes suivante:\n# Load data ----------------------------------\nurls &lt;- create_data_list(\"./sources.yml\")\n\n\npax_apt_all &lt;- import_airport_data(unlist(urls$airports))\npax_cie_all &lt;- import_compagnies_data(unlist(urls$compagnies))\npax_lsn_all &lt;- import_liaisons_data(unlist(urls$liaisons))\n\nairports_location &lt;- st_read(urls$geojson$airport)\n\nen les faisant précéder de l’import des scripts que nous avons déjà créé dans le dossier R:\nsource(\"R/create_data_list.R\")\nsource(\"R/import_data.R\")  \nsource(\"R/clean_dataframe.R\")\nUne bonne pratique est de tester son script dans une session vierge. Cela amène à construire pas à pas une chaine plus reproductible. Pour cela,\n\nAller dans les options de R via Tools &gt; Global Options et décocher la case Restore .RData into workspace at setup\nRedémarrer votre session R via le menu Session &gt; Restart R ou le raccourci CTRL+SHIFT+F10\n\nEt exécuter votre fichier main.R. Vous devriez rencontrer des erreurs car nous n’avons pas géré les import de librairies dans ce script puisque notre session actuelle ne bénéficie plus des import antérieurs.\nUne bonne pratique pour comprendre cette exigence de reproductibilité est d’itérativement ajouter les librairies utiles à mesure qu’on rencontre des erreurs (notre code étant très rapide à tourner, cette logique d’essai-erreur n’est pas très coûteuse). Si vous ne désirez pas faire ceci (dommage, c’est un bon exercice), vous pouvez trouver les imports de packages à faire pour que notre script soit reproductible.\n\n\nL’environnement minimal de reproductibilité pour que le script main.R fonctionne\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(sf)\n\nCes librairies sont à écrire au début de main.R."
  },
  {
    "objectID": "index.html#le-trafic-par-aéroport",
    "href": "index.html#le-trafic-par-aéroport",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "3.1 Le trafic par aéroport",
    "text": "3.1 Le trafic par aéroport\nPour commencer, nous allons prototyper la production d’une figure sur le trafic aérien au niveau d’un aéroport. Cela nous facilitera ensuite l’intégration dans une application interactive.\nPour cela, nous allons créer les deux objets temporaires suivants\n\nliste_aeroports &lt;- unique(pax_apt_all$apt)\ndefault_airport &lt;- liste_aeroports[1]\ndefault_airport\n\n[1] \"FMCZ\"\n\n\n\n\n\n\n\n\nExercice 3: graphiques de fréquentation des aéroports\n\n\n\n\nCréer une variable trafic égale apt_pax_dep + apt_pax_tr + apt_pax_arr\nNe conserver que les données relatives à l’aéroport default_airport\nCréer une variable date qui utilise les colonnes an et mois. Cette variable de date doit être au format date, pas au format chr\n\n\nEnchaînement des opérations attendues à cette étape\n\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\ntrafic_aeroports &lt;- pax_apt_all %&gt;%\n  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr) %&gt;%\n  filter(apt %in% default_airport) %&gt;%\n  mutate(\n    date = as.Date(paste(an, mois, \"01\", sep=\"-\"))\n  )\n\n\nFaire une figure ggplot toute simple pour voir la dynamique des données afin d’obtenir une figure similaire à celle-ci\n\n\nfigure_ggplot\n\n\n\n\nNous allons faire une application interactive par la suite. Il est donc plus intéressant d’avoir une figure un minimum réactive pour impliquer l’utilisateur de l’application.\n\nIl est donc plus pertinent de faire une figure avec la librairie plotly. Pour cela, vous pouvez vous inspirer de cette page\n\n\n\n\n\n\n\n\n\nLe code pour générer la figure\n\nfigure_plotly &lt;- trafic_aeroports %&gt;%\n  plot_ly(\n    x = ~date, y = ~trafic,\n    text = ~apt_nom,\n    hovertemplate = paste(\"&lt;i&gt;Aéroport:&lt;/i&gt; %{text}&lt;br&gt;Trafic: %{y}\") ,\n    type = 'scatter', mode = 'lines+markers')\n\n\n\nLe code complet pour répliquer cet exercice est donné ci-dessous.\n\n\nCode de l’exercice\n\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(plotly)\n\ntrafic_aeroports &lt;- pax_apt_all %&gt;%\n  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr) %&gt;%\n  filter(apt %in% default_airport) %&gt;%\n  mutate(\n    date = as.Date(paste(an, mois, \"01\", sep=\"-\"))\n  )\n\nfigure_ggplot &lt;- ggplot(trafic_aeroports) + geom_line(aes(x = date, y = trafic))\n\n\nfigure_plotly &lt;- trafic_aeroports %&gt;%\n  plot_ly(\n    x = ~date, y = ~trafic,\n    text = ~apt_nom,\n    hovertemplate = paste(\"&lt;i&gt;Aéroport:&lt;/i&gt; %{text}&lt;br&gt;Trafic: %{y}\") ,\n    type = 'scatter', mode = 'lines+markers')\n\nNous proposons de le transformer en fonction, ce sera plus simple à intégrer ultérieurement dans notre application\n\n\n\n\n\n\nExercice 3b: une fonction de production graphique\n\n\n\nTransformer le code ci-dessus en une fonction afin que\n\nles inputs soient les suivants: un dataframe, un aéroport à sélectionner\nla sortie soit notre figure plotly\n\nTester la fonction sur d’autres aéroports de la liste. Quand vous êtes satisfaits de celle-ci, déplacer la définition de cette fonction dans R/figures.R\n\n\n\n\nCode de l’exercice\n\n\nplot_airport_line &lt;- function(df, selected_airport){\n  trafic_aeroports &lt;- df %&gt;%\n    mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr) %&gt;%\n    filter(apt %in% selected_airport) %&gt;%\n    mutate(\n      date = as.Date(paste(an, mois, \"01\", sep=\"-\"))\n    )\n  \n  figure_plotly &lt;- trafic_aeroports %&gt;%\n    plot_ly(\n      x = ~date, y = ~trafic,\n      text = ~apt_nom,\n      hovertemplate = paste(\"&lt;i&gt;Aéroport:&lt;/i&gt; %{text}&lt;br&gt;Trafic: %{y}\") ,\n      type = 'scatter', mode = 'lines+markers')\n  \n  return(figure_plotly)\n}\n\nPar la suite, nous pouvons ajouter la ligne suivante à notre fichier main.R\n\nsource(\"R/figures.R\")"
  },
  {
    "objectID": "index.html#tableau-html-pour-afficher-des-données",
    "href": "index.html#tableau-html-pour-afficher-des-données",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "3.2 Tableau HTML pour afficher des données",
    "text": "3.2 Tableau HTML pour afficher des données\nLa première valorisation que nous intégrerons dans notre application est le modèle de figure ci-dessus. La deuxième sera un tableau permettant de visualiser certaines données directement dans le dashboard.\n\n\n\n\n\n\nExercice 4: un beau tableau pour nos données\n\n\n\nDT ou GT ?\n\n\nFaire un tableauDT\nPréparer le code pour DT\nAppli4\nFaire un leaflet\naeroports &lt;- readr::read_csv2(\"apt_localisation.csv\")\n\nlibrary(sf)\naeroports &lt;- st_as_sf(aeroports, coords = c(\"Longitude\", \"Latitude\"), crs = 4326)\n\ntrafic_aeroports &lt;- aeroports %&gt;%\n  inner_join(pax_apt, by = c(\"Code OACI\" = \"apt\")) %&gt;%\n  mutate(trafic = apt_pax_dep + apt_pax_tr + apt_pax_arr)\npalette &lt;- c(\"darkred\", \"forestgreen\", \"dodgerblue\", \"gold\")\ntrafic_aeroports &lt;- trafic_aeroports %&gt;%\n  mutate(\n    volume = ntile(trafic, 4)\n) %&gt;%\n  mutate(\n    color = palette[volume]\n  )\n  \nicons &lt;- awesomeIcons(\n  icon = 'ios-close',\n  iconColor = 'black',\n  library = 'ion',\n  markerColor = trafic_aeroports$color\n)\n\nleaflet(trafic_aeroports) %&gt;% addTiles() %&gt;%\n  addMarkers(popup = ~paste0(Nom, \": \", trafic))\n  #addAwesomeMarkers(icon=icons, label=~as.character(trafic))\nAppli5 Préparer un premier shiny sans plotly & leaflet\nAppli6 Ajouter à l’UI le plotly & leaflet\nAppli7 Contrôle de l’environnement avec renv"
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Un tableau de bord du trafic aérien avec  ou ",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCes fichiers ne sont pas générés manuellement. Ce sont des outils adaptés (renv pour R, pip pour Python) qui font ce travail de versionnage de l’environnement.↩︎\nSi vous êtes peu familier avec ce type de fichiers, vous pouvez consulter la fiche utilitR sur le sujet↩︎\nSi vous êtes peu familier avec les données géographiques, vous pouvez retenir l’idée qu’il s’agit de données traditionnelles auxquelles s’ajoute une dimension spatiale. Cette dernière vise à localiser les données sur la terre. La localisation se fait dans un espace à deux dimensions (espace cartésien) alors que notre planète est une sphère en trois dimensions. Le principe d’un système de projection est de faire ce passage en deux dimensions des positions. Le plus connu est le système GPS, qui est un héritier lointain de la représentation du monde par Mercator. Ce système est connu sous le nom de WGS 84 et porte le code EPSG 4326. L’autre système à retenir est le Lambert 93 (code EPSG 2154) qui est la projection légale en France (celle-ci, a contrario du Mercator, ne déforme pas la France sur une carte). Pour en savoir plus sur les systèmes de représentation, les avantages et inconvénients de chacun, il existe de nombreuses ressources en ligne. Des éléments introductifs, et des démonstrations interactives, en lien avec la librairie Geopandas de Python sont disponibles ici.↩︎"
  }
]