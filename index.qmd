---
title: "Un tableau de bord du trafic aérien avec {{< fa brands r-project >}} ou {{< fa brands python >}}"
number-sections: true
eval-r-chunk: true
filters:
   - include-code-files
---

```{=html}
<a href="https://datalab.sspcloud.fr/launcher/ide/rstudio?version=1.15.25&autoLaunch=true&networking.user.enabled=true&git.repository=«https%3A%2F%2Fgithub.com%2FInseeFrLab%2Ffunathon2024_sujet2.git»&onyxia.friendlyName=«config-funathon2024»&kubernetes.role=«admin»" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/SSP%20Cloud-Ouvrir_dans_RStudio-blue?logo=rstudio&amp;logoColor=blue" alt="Onyxia"></a>
```


{{< include "parts/01-intro.qmd" >}}

# Exploration des données de trafic aérien

Pour pouvoir proposer un tableau de bord pertinent, le premier geste à avoir
est d'explorer soi-même les données. L'objectif de cette partie est de guider
le travail exploratoire. Le travail ultérieur sur l'application visera à 
consolider et généraliser ces explorations de données. 


## Préliminaire: récupérer le projet squelette avec `Git` {{< fa brands git-alt >}}

{{< include "parts/02-recuperation.qmd" >}}


## Architecture du projet

Le projet récupéré comporte de nombreux fichiers. Nous allons 
progressivement les découvrir dans ce tutoriel. A l'heure actuelle,
on peut se concentrer sur les fichiers suivants:

```
funathon_sujet2/
├── renv.lock
├── global.R
├── server.R
└── ui.R
```

Le premier fichier (`renv.lock`) correspond à la liste des _packages_ nécessaires
pour reproduire l'environnement. Il a été généré automatiquement grâce à 
un écosystème `renv` particulièrement adapté pour assurer la reproductibilité
de projets {{< fa brands r-project >}} (voir la suite). 

<details>
<summary>
Observer la composition de ce fichier (100 premières lignes)
</summary>
```{.yaml include="renv.lock" filename="renv.lock" end-line=100}
```
</details>

Les fichiers `server.R` et `ui.R` constituent le coeur de notre application 
`Shiny`. Ils représentent, respectivement, le moteur de calcul (le serveur)
et l'interface utilisateur de notre application. Nous reviendrons sur ce concept. Le fichier `global.R` stocke
un certain nombre d'objets utiles à l'application mais qui n'ont pas besoin
d'être recalculé à chaque action sur l'interface graphique. Nous allons progressivement construire ces fichiers pendant les différents exercices.


## Installer les _packages_ nécessaires pour ce tutoriel

{{< include "parts/03-restaurer.qmd" >}}


# Récupérer les données

Les sources sont listées dans le fichier `sources.yaml`. 
Notre tutoriel utilisera quatres sources différentes:

- Le trafic au niveau de chaque aéroport (format _CSV_)
- Le nombre de passagers pour différentes liaisons (format _CSV_)
- Le trafic pour différentes compagnies (format _CSV_)
- Les localisations des aéroports (format _geojson_)

Une bonne pratique, lorsqu'on utilise plusieurs sources,
est de lister celles-ci dans un fichier `YAML` plutôt que de les inscrire
en brut dans le code. Ce dernier sera plus lisible grâce à cette approche.

<details>
<summary>

Voir le fichier `sources.yml`

</summary>
```{.yaml include="sources.yml" filename="sources.yml"}
```
</details>


## Importer la liste des sources disponibles

{{< include "parts/99-exo1.qmd" >}}

## Importer les premières bases

Nous pouvons maintenant utiliser cette fonction
pour lister tous nos URL des sources.

```{r}
urls <- create_data_list("sources.yml")
```


{{< include "parts/99-exo2.qmd" >}}


# Exploration des données

```{r}
#| label: intermediates-exo2
#| echo: false
#| output: false
source("intermediates/exo2.R")
```


## Le trafic par aéroport

Pour commencer, nous allons prototyper la production d'une figure
sur le trafic aérien au niveau d'un aéroport. Cela nous facilitera ensuite
l'intégration dans une application interactive. 

Pour cela, nous allons créer les deux objets temporaires suivants,
que vous pouvez mettre à la fin du fichier `main.R` pour le moment

```{r}
liste_aeroports <- unique(pax_apt_all$apt)
default_airport <- liste_aeroports[1]
default_airport
```

```{r}
#| output: false
#| echo: false
source("intermediates/exo3.R")
```

Dans le prochain exercice, nous proposons d'abord de créer un `ggplot` minimal pour vérifier que
nos données ont bien la dimension temporelle attendue. Cependant, comme `Shiny` est un système
interactif, on privilégiera la librairie [`Plotly`](https://plotly.com/r/) pour faire des figures. 

{{< include "parts/99-exo3.qmd" >}}


## Tableau HTML pour afficher des données

La première valorisation que nous intégrerons dans notre application est
le modèle de figure ci-dessus. La deuxième sera un tableau
permettant de visualiser certaines données directement dans le _dashboard_. 
Il existe plusieurs _packages_ pour faire cela. Le plus
complet est [`GT`](https://gt.rstudio.com/), développé par `RStudio`. En peu de temps,
ce _package_ est devenu un incontournable et propose des fonctionnalités bien
plus complètes que les solutions qui existaient par le passé, notamment [`DT`](https://rstudio.github.io/DT/).


Pour le prochain exercice, vous pourrez utiliser ces objets

```{r}
#| echo: true 
YEARS_LIST  <- as.character(2018:2022)
MONTHS_LIST <- 1:12
```


{{< include "parts/99-exo4.qmd" >}}


## Carte des aéroports

La dernière valorisation que nous allons intégrer est une carte interactive
du trafic de nos aéroports. Cette carte va être assez basique. Si vous
désirez mettre en oeuvre des visualisations plus complexes, vous pouvez
tout à fait le faire. 

Pour cet exercice, nous allons fixer une date pour prototyper notre 
code. Cela nous facilitera la transformation ultérieure en fonction. 

```{r}
months <- 1
years <- 2019
```

Voici également une palette de couleurs qui sera utile à la fin de l'exercice. 

```{r}
palette <- c("green", "blue", "red")
```

{{< include "parts/99-exo5.qmd" >}}

# Création de l'application 

Maintenant tous les ingrédients sont là pour transformer cette chaîne en application
interactive. L'architecture de notre application sera la suivante:

![](img/ui-r.png)

Comme toute application _web_, `Shiny` repose sur deux piliers: 

- l'interface utilisateur (UI) qui présente au navigateur des actions possibles et affiche des _output_ adaptés
- le serveur qui répond à ces actions de l'utilisateur, produit les _output_ et les envoie à l'interface

Supprimer les fichiers `ui.R` et `server.R` dans votre dossier de travail. Nous allons les recréer progressivement afin de comprendre, pas à pas, la logique d'une application.

{{< include "parts/99-exo6.qmd" >}}

{{< include "parts/99-exo7.qmd" >}}




# Partager cette application: une ouverture vers la mise en production